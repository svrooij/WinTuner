using Microsoft.Extensions.Logging;
using Microsoft.Graph.Beta;
using Microsoft.Graph.Beta.Models;
using Microsoft.Graph.Beta.Models.ODataErrors;
using WingetIntune.Models;

namespace WingetIntune.Graph;
public class GraphStoreAppUploader
{
    private readonly ILogger<GraphStoreAppUploader> logger;
    private readonly IFileManager fileManager;
    private readonly WinTuner.Proxy.Client.WinTunerProxyClient proxyClient;

    public GraphStoreAppUploader(ILogger<GraphStoreAppUploader> logger, IFileManager fileManager, WinTuner.Proxy.Client.WinTunerProxyClient proxyClient)
    {
#if NET8_0_OR_GREATER
        ArgumentNullException.ThrowIfNull(logger);
        ArgumentNullException.ThrowIfNull(fileManager);
        ArgumentNullException.ThrowIfNull(proxyClient);
#endif
        this.logger = logger;
        this.fileManager = fileManager;
        this.proxyClient = proxyClient;
    }

    public async Task<string?> GetStoreIdForNameAsync(string searchstring, CancellationToken cancellationToken)
    {
#if NET8_0_OR_GREATER
        ArgumentException.ThrowIfNullOrEmpty(searchstring);
#endif
        var results = await proxyClient.Store.Search.GetAsync(req => req.QueryParameters.SearchString = searchstring, cancellationToken);
        return results?.FirstOrDefault()?.PackageIdentifier;
    }

    public async Task<WinGetApp?> CreateStoreAppAsync(GraphServiceClient graphServiceClient, string packageId, CancellationToken cancellationToken)
    {
#if NET8_0_OR_GREATER
        ArgumentNullException.ThrowIfNull(graphServiceClient);
        ArgumentException.ThrowIfNullOrEmpty(packageId);
        ArgumentNullException.ThrowIfNull(cancellationToken);
#endif
        var package = await proxyClient.Store.Package[packageId].GetAsync(cancellationToken: cancellationToken);
        if (package is null)
        {
            logger.LogError("No package found for {packageId}", packageId);
            return null;
        }
        var app = new WinGetApp
        {
            DisplayName = package.DisplayName,
            PackageIdentifier = package.PackageIdentifier!,
            InformationUrl = package.InformationUrl,
            PrivacyInformationUrl = package.PrivacyInformationUrl,
            Description = package.Description,
            Developer = package.Publisher,
            Publisher = package.Publisher,
            Notes = $"Generated by WinTuner at {DateTimeOffset.UtcNow} [WinTuner|store|{package.PackageIdentifier}]",
            InstallExperience = new WinGetAppInstallExperience
            {
                RunAsAccount = package.Scope == "user" ? RunAsAccountType.User : RunAsAccountType.System
            }
        };
        app.AdditionalData.Add("repositoryType", "microsoftstore");
        try
        {
            if (package.IconUrl is not null)
            {
                var imagePath = Path.GetTempFileName();
                await fileManager.DownloadFileAsync(package.IconUrl, imagePath, overrideFile: true, cancellationToken: cancellationToken);
                app.LargeIcon = new MimeContent
                {
                    Type = "image/png",
                    Value = await fileManager.ReadAllBytesAsync(imagePath, cancellationToken)
                };
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error downloading image for {packageId}", packageId);
        }
        return await uploadAppAsync(graphServiceClient, app, cancellationToken);
    }

    private async Task<WinGetApp?> uploadAppAsync(GraphServiceClient graphServiceClient, WinGetApp winGetApp, CancellationToken cancellationToken)
    {
        logger.LogInformation("Creating new WinGetApp (MsStore) for {PackageIdentifier}", winGetApp.PackageIdentifier);
        try
        {
            var createdApp = await graphServiceClient.DeviceAppManagement.MobileApps.PostAsync(winGetApp, cancellationToken);
            logger.LogInformation("MsStore app {PackageIdentifier} created in Intune {AppId}", createdApp?.PackageIdentifier, createdApp?.Id);
            return createdApp;
        }
        catch (ODataError ex)
        {
            logger.LogError(ex, "Error publishing app {Message}", ex.Error?.Message);
            throw;
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error publishing app");
            throw;
        }
    }
}
