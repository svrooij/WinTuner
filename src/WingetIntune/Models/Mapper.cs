using Riok.Mapperly.Abstractions;
using Microsoft.Graph.Beta.Models;
using WingetIntune.Intune;

namespace WingetIntune.Models;
[Mapper]
internal partial class Mapper
{
    public Win32LobApp ToWin32LobApp(PackageInfo packageInfo)
    {
        if (packageInfo is null)
        {
            throw new ArgumentNullException(nameof(packageInfo));
        }

        if(packageInfo.Source != PackageSource.Winget)
        {
            throw new NotSupportedException($"Package source {packageInfo.Source} is not supported");
        }

        var app = _ToWin32LobApp(packageInfo);
        app.DisplayVersion = packageInfo.Version;
        if (packageInfo.InstallerType == InstallerType.Msi)
        {
            app.MsiInformation = new Win32LobAppMsiInformation
            {
                ProductCode = packageInfo.MsiProductCode!,
                ProductVersion = packageInfo.MsiVersion!,
                Publisher = packageInfo.Publisher,
                ProductName = packageInfo.DisplayName
            };

            app.DetectionRules = new List<Win32LobAppDetection>
            {
                new Win32LobAppProductCodeDetection
                {
                    ProductCode = packageInfo.MsiProductCode,
                    ProductVersion = packageInfo.MsiVersion,
                    ProductVersionOperator = Win32LobAppDetectionOperator.Equal
                }
            };

            app.InstallExperience = new Win32LobAppInstallExperience() { RunAsAccount = RunAsAccountType.System, DeviceRestartBehavior = Win32LobAppRestartBehavior.BasedOnReturnCode };
            app.ReturnCodes = new List<Win32LobAppReturnCode>
            {
                new Win32LobAppReturnCode { Type = Win32LobAppReturnCodeType.Success, ReturnCode = 0 },
                new Win32LobAppReturnCode { Type = Win32LobAppReturnCodeType.Success, ReturnCode = 1707 },
                new Win32LobAppReturnCode { Type = Win32LobAppReturnCodeType.SoftReboot, ReturnCode = 3010 },
                new Win32LobAppReturnCode { Type = Win32LobAppReturnCodeType.HardReboot, ReturnCode = 1641 },
                new Win32LobAppReturnCode { Type = Win32LobAppReturnCodeType.Retry, ReturnCode = 1618 }
            };
        }
        else
        {
            throw new NotSupportedException($"Installer type {packageInfo.InstallerType} is not supported");
        }
        app.Owner = app.Publisher;
        app.FileName = Path.GetFileNameWithoutExtension(packageInfo.InstallerFilename) + ".intunewin";
        app.Notes = $"Generated by {nameof(WingetIntune)} at {DateTimeOffset.UtcNow}";
        return app;
    }
    private partial Win32LobApp _ToWin32LobApp(PackageInfo packageInfo);

    internal partial FileEncryptionInfo ToFileEncryptionInfo(ApplicationInfoEncryptionInfo packageInfo);
}
